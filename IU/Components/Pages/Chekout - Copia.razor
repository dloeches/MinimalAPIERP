@page "/checkout2"

@using BlazorStoreApp.Infraestructura.Dtos
@using IU.Services

@rendermode InteractiveServer
@inject IOrderService OrderService
@inject ICartItemService CartItemService
@inject NavigationManager Navigation

<h3>Checkout</h3>

<EditForm Model="@order" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="name">Name:</label>
        <InputText id="name" class="form-control" @bind-Value="order.Name" />
    </div>

    <div class="form-group">
        <label for="address">Address:</label>
        <InputText id="address" class="form-control" @bind-Value="order.Address" />
    </div>

    <div class="form-group">
        <label for="city">City:</label>
        <InputText id="city" class="form-control" @bind-Value="order.City" />
    </div>

    <div class="form-group">
        <label for="state">State:</label>
        <InputText id="state" class="form-control" @bind-Value="order.State" />
    </div>

    <div class="form-group">
        <label for="postalCode">Postal Code:</label>
        <InputText id="postalCode" class="form-control" @bind-Value="order.PostalCode" />
    </div>

    <div class="form-group">
        <label for="country">Country:</label>
        <InputText id="country" class="form-control" @bind-Value="order.Country" />
    </div>

    <div class="form-group">
        <label for="phone">Phone:</label>
        <InputText id="phone" class="form-control" @bind-Value="order.Phone" />
    </div>

    <div class="form-group">
        <label for="email">Email:</label>
        <InputText id="email" type="email" class="form-control" @bind-Value="order.Email" />
    </div>

    <button type="submit" class="btn btn-primary">Place Order</button>
</EditForm>

<ul class="cart-list">
    @if (cartItems.Any())
        {
        foreach (var item in cartItems)
             {
            <li>
                @item.Product.Name - @item.Product.SalePrice: €
    
                <input type="number" value="@item.Count" min="1" readonly>
            </li>
            }
        }
</ul>

@code {
    private OrderDto order = new OrderDto
        {
            Id = Guid.NewGuid(),
            OrderDate = DateTime.UtcNow,
            OrderDetails = new List<OrderDetailDto>()
        };

    private List<CartItemDto> cartItems = new List<CartItemDto>();

    protected override async Task OnInitializedAsync()
    {
        cartItems = await CartItemService.GetCartItemsAsync();

        foreach (var item in cartItems)
        {
            order.OrderDetails.Add(new OrderDetailDto
                {
                    Id = Guid.NewGuid(),
                    Product = item.Product,
                    Count = item.Count,
                    UnitPrice = item.Product.SalePrice
                });

            order.Total += item.Product.SalePrice * item.Count;
        }
    }

    private async Task HandleValidSubmit()
    {
        await OrderService.CreateOrderAsync(order);
        
        await CartItemService.ClearCartByCartAsync("unico");

        Navigation.NavigateTo("/order-confirmation");
        
     
    }
}
